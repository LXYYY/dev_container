make build_dev
make[1]: Entering directory '/mnt/sda1/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws/.devcontainer'
docker build -t voxgraph_dev ./layer_dev
Sending build context to Docker daemon  87.29MB
Step 1/28 : FROM voxgraph:melodic-tf1.14.0-perception
 ---> 402191184494
Step 2/28 : ARG INSTALL_ZSH="false"
 ---> Using cache
 ---> 1643c4de29a4
Step 3/28 : ARG UPGRADE_PACKAGES="false"
 ---> Using cache
 ---> c712a9d75f58
Step 4/28 : ARG ENABLE_NONROOT_DOCKER="true"
 ---> Using cache
 ---> aebb2b430822
Step 5/28 : ARG SOURCE_SOCKET=/var/run/docker-host.sock
 ---> Using cache
 ---> 9234efbf3d55
Step 6/28 : ARG TARGET_SOCKET=/var/run/docker.sock
 ---> Using cache
 ---> dad65d9c4566
Step 7/28 : ARG USERNAME=lxy
 ---> Using cache
 ---> b7336875e1ca
Step 8/28 : ARG USER_UID=1000
 ---> Using cache
 ---> 2839c025fa3b
Step 9/28 : ARG USER_GID=$USER_UID
 ---> Using cache
 ---> 49d0a8c35730
Step 10/28 : RUN apt update && apt install python-pip -y
 ---> Using cache
 ---> bf44a49275ab
Step 11/28 : RUN pip install -U pylint
 ---> Using cache
 ---> 927d9ffa0643
Step 12/28 : RUN apt update && apt install clang-format-8 -y
 ---> Using cache
 ---> b7b9ac3ab323
Step 13/28 : RUN ln -s /usr/bin/clang-format-8 /usr/bin/clang-format
 ---> Using cache
 ---> 057583b9dcfb
Step 14/28 : RUN apt install libprotobuf-dev protobuf-compiler -y
 ---> Using cache
 ---> 135ecaf3a9d5
Step 15/28 : RUN apt update && apt install gdb -y
 ---> Using cache
 ---> 26f5313d7bf9
Step 16/28 : RUN apt-get update   && apt-get install -y ssh       build-essential       gcc       g++       gdb       clang-8       cmake       rsync       tar       python   && apt-get clean
 ---> Using cache
 ---> 2c854c3b6970
Step 17/28 : RUN (     echo 'LogLevel DEBUG2';     echo 'PermitRootLogin yes';     echo 'PasswordAuthentication yes';     echo 'Subsystem sftp /usr/lib/openssh/sftp-server';   ) > /etc/ssh/sshd_config_test_clion   && mkdir /run/sshd
 ---> Using cache
 ---> f9c64fafacc3
Step 18/28 : RUN yes password | passwd lxy
 ---> Using cache
 ---> 431b653273aa
Step 19/28 : ENV CC /usr/lib/ccache/gcc
 ---> Using cache
 ---> a878076e5742
Step 20/28 : ENV CXX /usr/lib/ccache/g++
 ---> Using cache
 ---> a67d4e1c7ff8
Step 21/28 : RUN apt update && apt install doxygen llvm-8-tools -y && apt clean
 ---> Using cache
 ---> 8a89c677d048
Step 22/28 : COPY clangd_11.0.0/bin/clangd /usr/bin
 ---> Using cache
 ---> 1d18782f6fdd
Step 23/28 : COPY clangd_11.0.0/lib/clang /usr/lib/clang
 ---> Using cache
 ---> 27468d88b494
Step 24/28 : RUN apt update && apt install ccache -y
 ---> Using cache
 ---> 889203c8a751
Step 25/28 : ENV PATH "/usr/lib/ccache:$PATH"
 ---> Using cache
 ---> 2867978c5eb5
Step 26/28 : RUN ccache --max-size=10G
 ---> Using cache
 ---> dc75518384cd
Step 27/28 : RUN chown -R lxy /home/lxy/.ccache
 ---> Using cache
 ---> 5d794417dd47
Step 28/28 : RUN apt update && apt install xterm -y
 ---> Using cache
 ---> 505b2c8479a6
Successfully built 505b2c8479a6
Successfully tagged voxgraph_dev:latest
make[1]: Leaving directory '/mnt/sda1/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws/.devcontainer'
make build_dev_vim
make[1]: Entering directory '/mnt/sda1/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws/.devcontainer'
docker build -t voxgraph_dev_vim ./layer_vim
Sending build context to Docker daemon  106.5MB
Step 1/33 : FROM voxgraph_dev
 ---> 505b2c8479a6
Step 2/33 : RUN apt-get remove --purge vim vim-runtime vim-gnome vim-tiny vim-gui-common
 ---> Using cache
 ---> af07bc9a254d
Step 3/33 : RUN apt-get update                                               && apt-get install -y                                             autoconf                                                        automake                                                        cmake                                                           fish                                                            g++                                                             gettext                                                         git                                                             libtool                                                         libtool-bin                                                     lua5.3                                                          ninja-build                                                     pkg-config                                                      unzip                                                           xclip                                                           xfonts-utils                                                  && apt-get clean all
 ---> Using cache
 ---> 99e277c7e598
Step 4/33 : RUN apt-get install checkinstall
 ---> Using cache
 ---> 50128144256e
Step 5/33 : RUN rm -rf /usr/local/share/vim /usr/bin/vim
 ---> Using cache
 ---> 9efa1a359d03
Step 6/33 : COPY vim ${HOME}/vim
 ---> Using cache
 ---> 604e88137190
Step 7/33 : RUN apt-get install -y python-dev ruby-dev libperl-dev libncurses5-dev libatk1.0-dev libx11-dev libxpm-dev libxt-dev
 ---> Using cache
 ---> c14630066ed2
Step 8/33 : RUN apt install -y python3-dev
 ---> Using cache
 ---> 066fc1bb5fed
Step 9/33 : ENV LUA_PREFIX /usr/local
 ---> Using cache
 ---> c9801bcf4fff
Step 10/33 : RUN cd ${HOME}/vim && ./configure   --enable-multibyte   --enable-perlinterp=dynamic   --enable-rubyinterp=dynamic   --with-ruby-command=/usr/bin/ruby   --enable-python3interp=yes   --with-python3-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu   --enable-cscope   --enable-gui=auto   --with-features=huge   --with-x   --enable-fontset   --enable-largefile   --disable-netbeans   --with-compiledby=sh1r0   --enable-fail-if-missing &&   make && make install
 ---> Using cache
 ---> c60940165c98
Step 11/33 : RUN apt update && apt-get -y install software-properties-common
 ---> Using cache
 ---> 88d9d03e8412
Step 12/33 : RUN add-apt-repository ppa:neovim-ppa/unstable
 ---> Using cache
 ---> 19b24c2d3273
Step 13/33 : RUN apt update && apt install -y python-dev python-pip python3-dev python3-setuptools python3-pip
 ---> Using cache
 ---> cd0380c88e3f
Step 14/33 : RUN apt update && apt-get install -y neovim
 ---> Using cache
 ---> f43b999e9554
Step 15/33 : RUN update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60 &&       update-alternatives --set vi /usr/bin/nvim &&       update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60 &&       update-alternatives --config vim &&       update-alternatives --set vim /usr/bin/nvim &&       update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60 &&       update-alternatives --set editor /usr/bin/nvim
 ---> Using cache
 ---> 08a5d1b25dff
Step 16/33 : RUN update-alternatives --install /usr/bin/python python /usr/bin/python2 0
 ---> Using cache
 ---> b0069d4120a7
Step 17/33 : RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1
 ---> Using cache
 ---> 4460bfcca479
Step 18/33 : RUN update-alternatives --set python /usr/bin/python3
 ---> Using cache
 ---> a16520afe157
Step 19/33 : RUN apt clean && apt update && apt install python3-pip -y && apt clean
 ---> Using cache
 ---> 1144824bac27
Step 20/33 : RUN apt update && apt install openjdk-8-jdk -y && apt clean
 ---> Using cache
 ---> ba2bd6508bb0
Step 21/33 : RUN apt-get update && apt-get install -y g++ build-essential cmake git libncurses-dev zlib1g-dev       libevent-dev       libcrypto++-dev libmsgpack-dev libjsoncpp-dev       libmysqlcppconn-dev libgtest-dev cmake libgoogle-perftools-dev       libssl-dev libmysqlclient-dev libcrypto++-dev libc6-dev libc6-dev-i386
 ---> Using cache
 ---> d4baf9cb67f9
Step 22/33 : COPY installNodejs.sh /
 ---> Using cache
 ---> 563defb5e7e4
Step 23/33 : RUN chmod +x /installNodejs.sh && cd / && ./installNodejs.sh && ln -s /usr/bin/nodejs /usr/bin/node
 ---> Using cache
 ---> db94e36ccc2f
Step 24/33 : RUN chown -R lxy /home/lxy/
 ---> Using cache
 ---> 10cd68c68fc3
Step 25/33 : USER lxy
 ---> Using cache
 ---> 7cb0d7cece1a
Step 26/33 : WORKDIR $HOME
 ---> Using cache
 ---> 09a1aa51232b
Step 27/33 : ENV PATH "/home/lxy/.local/bin:${PATH}"
 ---> Using cache
 ---> 9bab00f629f1
Step 28/33 : COPY installCocvim.sh .
 ---> Using cache
 ---> 48d0ae3f192c
Step 29/33 : COPY vimrc ${HOME}/.vimrc
 ---> Using cache
 ---> c68124a1eaf7
Step 30/33 : COPY coc-settings.json ${HOME}/.vim/
 ---> Using cache
 ---> 706353fa5b0a
Step 31/33 : RUN sudo chmod +x installCocvim.sh && ./installCocvim.sh
 ---> Using cache
 ---> 682faae5d7b1
Step 32/33 : USER root
 ---> Using cache
 ---> 402dbd527fab
Step 33/33 : RUN update-alternatives --set python /usr/bin/python2
 ---> Using cache
 ---> cbeb2a79f921
Successfully built cbeb2a79f921
Successfully tagged voxgraph_dev_vim:latest
make[1]: Leaving directory '/mnt/sda1/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws/.devcontainer'
docker build -t voxgraph_vs .
Sending build context to Docker daemon    704MB
Step 1/7 : FROM voxgraph_dev_vim:latest
 ---> cbeb2a79f921
Step 2/7 : RUN chsh -s /bin/bash lxy &&   yes lxy19961002 | passwd lxy
 ---> Using cache
 ---> 1d2c249905d8
Step 3/7 : ENV HOME /home/lxy
 ---> Using cache
 ---> 0db062c95361
Step 4/7 : RUN apt update     && apt install -y openssh-server                       xauth     && mkdir /root/.ssh     && chmod 700 /root/.ssh     && ssh-keygen -A     && sed -i "s/^.*X11Forwarding.*$/X11Forwarding yes/" /etc/ssh/sshd_config     && sed -i "s/^.*X11UseLocalhost.*$/X11UseLocalhost no/" /etc/ssh/sshd_config     && grep "^X11UseLocalhost" /etc/ssh/sshd_config || echo "X11UseLocalhost no" >> /etc/ssh/sshd_config
 ---> Using cache
 ---> 83c394f17203
Step 5/7 : WORKDIR /workspaces/voxgraph_melodic_ws/
 ---> Using cache
 ---> 83c0a9ef123b
Step 6/7 : ENTRYPOINT [ "/ros_entrypoint.sh" ]
 ---> Using cache
 ---> dda54e5050e5
Step 7/7 : CMD ["sh", "-c", "/usr/sbin/sshd && tail -f /dev/null"]
 ---> Using cache
 ---> 001371405b1f
Successfully built 001371405b1f
Successfully tagged voxgraph_vs:latest
docker run --rm -it --name voxgraph_vs\
	--cap-add=SYS_PTRACE --security-opt seccomp=unconfined \
		--gpus all \
		--name voxgraph_vs \
		-e DISPLAY=localhost:10.0 \
		-e QT_X11_NO_MITSHM=1 \
		-e XAUTHORITY=/tmp/.docker.xauth \
		-e HOME=/home/lxy \
		-v /tmp/.X11-unix:/tmp/.X11-unix:rw \
		-v /tmp/.docker.xauth:/tmp/.docker.xauth \
		-v /home/lxy/Datasets:/home/lxy/Datasets \
		-v /home/lxy/Workspace/mrslam/coxslam_ws:/home/lxy/Workspace/mrslam/coxslam_ws/ \
		-v /home/lxy/Workspace/mrslam/orbslam_2_ros_ws:/home/lxy/Workspace/mrslam/orbslam_2_ros_ws/ \
		-v /home/lxy/Workspace/mrslam/sysmon_ws:/home/lxy/Workspace/mrslam/sysmon_ws/ \
		-v /home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_ws:/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_ws \
		-v /home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws:/workspaces/voxgraph_melodic_ws/ \
		-v /etc/localtime:/etc/localtime \
		-p2222:22 \
		--runtime=nvidia \
		--privileged \
		voxgraph_vs
the input device is not a TTY
make: *** [Makefile:17: run] Error 1
make build_dev
make[1]: Entering directory '/mnt/sda1/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws/.devcontainer'
docker build -t voxgraph_dev ./layer_dev
Sending build context to Docker daemon  87.29MB
Step 1/28 : FROM voxgraph:melodic-tf1.14.0-perception
 ---> 402191184494
Step 2/28 : ARG INSTALL_ZSH="false"
 ---> Using cache
 ---> 1643c4de29a4
Step 3/28 : ARG UPGRADE_PACKAGES="false"
 ---> Using cache
 ---> c712a9d75f58
Step 4/28 : ARG ENABLE_NONROOT_DOCKER="true"
 ---> Using cache
 ---> aebb2b430822
Step 5/28 : ARG SOURCE_SOCKET=/var/run/docker-host.sock
 ---> Using cache
 ---> 9234efbf3d55
Step 6/28 : ARG TARGET_SOCKET=/var/run/docker.sock
 ---> Using cache
 ---> dad65d9c4566
Step 7/28 : ARG USERNAME=lxy
 ---> Using cache
 ---> b7336875e1ca
Step 8/28 : ARG USER_UID=1000
 ---> Using cache
 ---> 2839c025fa3b
Step 9/28 : ARG USER_GID=$USER_UID
 ---> Using cache
 ---> 49d0a8c35730
Step 10/28 : RUN apt update && apt install python-pip -y
 ---> Using cache
 ---> bf44a49275ab
Step 11/28 : RUN pip install -U pylint
 ---> Using cache
 ---> 927d9ffa0643
Step 12/28 : RUN apt update && apt install clang-format-8 -y
 ---> Using cache
 ---> b7b9ac3ab323
Step 13/28 : RUN ln -s /usr/bin/clang-format-8 /usr/bin/clang-format
 ---> Using cache
 ---> 057583b9dcfb
Step 14/28 : RUN apt install libprotobuf-dev protobuf-compiler -y
 ---> Using cache
 ---> 135ecaf3a9d5
Step 15/28 : RUN apt update && apt install gdb -y
 ---> Using cache
 ---> 26f5313d7bf9
Step 16/28 : RUN apt-get update   && apt-get install -y ssh       build-essential       gcc       g++       gdb       clang-8       cmake       rsync       tar       python   && apt-get clean
 ---> Using cache
 ---> 2c854c3b6970
Step 17/28 : RUN (     echo 'LogLevel DEBUG2';     echo 'PermitRootLogin yes';     echo 'PasswordAuthentication yes';     echo 'Subsystem sftp /usr/lib/openssh/sftp-server';   ) > /etc/ssh/sshd_config_test_clion   && mkdir /run/sshd
 ---> Using cache
 ---> f9c64fafacc3
Step 18/28 : RUN yes password | passwd lxy
 ---> Using cache
 ---> 431b653273aa
Step 19/28 : ENV CC /usr/lib/ccache/gcc
 ---> Using cache
 ---> a878076e5742
Step 20/28 : ENV CXX /usr/lib/ccache/g++
 ---> Using cache
 ---> a67d4e1c7ff8
Step 21/28 : RUN apt update && apt install doxygen llvm-8-tools -y && apt clean
 ---> Using cache
 ---> 8a89c677d048
Step 22/28 : COPY clangd_11.0.0/bin/clangd /usr/bin
 ---> Using cache
 ---> 1d18782f6fdd
Step 23/28 : COPY clangd_11.0.0/lib/clang /usr/lib/clang
 ---> Using cache
 ---> 27468d88b494
Step 24/28 : RUN apt update && apt install ccache -y
 ---> Using cache
 ---> 889203c8a751
Step 25/28 : ENV PATH "/usr/lib/ccache:$PATH"
 ---> Using cache
 ---> 2867978c5eb5
Step 26/28 : RUN ccache --max-size=10G
 ---> Using cache
 ---> dc75518384cd
Step 27/28 : RUN chown -R lxy /home/lxy/.ccache
 ---> Using cache
 ---> 5d794417dd47
Step 28/28 : RUN apt update && apt install xterm -y
 ---> Using cache
 ---> 505b2c8479a6
Successfully built 505b2c8479a6
Successfully tagged voxgraph_dev:latest
make[1]: Leaving directory '/mnt/sda1/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws/.devcontainer'
make build_dev_vim
make[1]: Entering directory '/mnt/sda1/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws/.devcontainer'
docker build -t voxgraph_dev_vim ./layer_vim
Sending build context to Docker daemon  106.5MB
Step 1/33 : FROM voxgraph_dev
 ---> 505b2c8479a6
Step 2/33 : RUN apt-get remove --purge vim vim-runtime vim-gnome vim-tiny vim-gui-common
 ---> Using cache
 ---> af07bc9a254d
Step 3/33 : RUN apt-get update                                               && apt-get install -y                                             autoconf                                                        automake                                                        cmake                                                           fish                                                            g++                                                             gettext                                                         git                                                             libtool                                                         libtool-bin                                                     lua5.3                                                          ninja-build                                                     pkg-config                                                      unzip                                                           xclip                                                           xfonts-utils                                                  && apt-get clean all
 ---> Using cache
 ---> 99e277c7e598
Step 4/33 : RUN apt-get install checkinstall
 ---> Using cache
 ---> 50128144256e
Step 5/33 : RUN rm -rf /usr/local/share/vim /usr/bin/vim
 ---> Using cache
 ---> 9efa1a359d03
Step 6/33 : COPY vim ${HOME}/vim
 ---> Using cache
 ---> 604e88137190
Step 7/33 : RUN apt-get install -y python-dev ruby-dev libperl-dev libncurses5-dev libatk1.0-dev libx11-dev libxpm-dev libxt-dev
 ---> Using cache
 ---> c14630066ed2
Step 8/33 : RUN apt install -y python3-dev
 ---> Using cache
 ---> 066fc1bb5fed
Step 9/33 : ENV LUA_PREFIX /usr/local
 ---> Using cache
 ---> c9801bcf4fff
Step 10/33 : RUN cd ${HOME}/vim && ./configure   --enable-multibyte   --enable-perlinterp=dynamic   --enable-rubyinterp=dynamic   --with-ruby-command=/usr/bin/ruby   --enable-python3interp=yes   --with-python3-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu   --enable-cscope   --enable-gui=auto   --with-features=huge   --with-x   --enable-fontset   --enable-largefile   --disable-netbeans   --with-compiledby=sh1r0   --enable-fail-if-missing &&   make && make install
 ---> Using cache
 ---> c60940165c98
Step 11/33 : RUN apt update && apt-get -y install software-properties-common
 ---> Using cache
 ---> 88d9d03e8412
Step 12/33 : RUN add-apt-repository ppa:neovim-ppa/unstable
 ---> Using cache
 ---> 19b24c2d3273
Step 13/33 : RUN apt update && apt install -y python-dev python-pip python3-dev python3-setuptools python3-pip
 ---> Using cache
 ---> cd0380c88e3f
Step 14/33 : RUN apt update && apt-get install -y neovim
 ---> Using cache
 ---> f43b999e9554
Step 15/33 : RUN update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60 &&       update-alternatives --set vi /usr/bin/nvim &&       update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60 &&       update-alternatives --config vim &&       update-alternatives --set vim /usr/bin/nvim &&       update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60 &&       update-alternatives --set editor /usr/bin/nvim
 ---> Using cache
 ---> 08a5d1b25dff
Step 16/33 : RUN update-alternatives --install /usr/bin/python python /usr/bin/python2 0
 ---> Using cache
 ---> b0069d4120a7
Step 17/33 : RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1
 ---> Using cache
 ---> 4460bfcca479
Step 18/33 : RUN update-alternatives --set python /usr/bin/python3
 ---> Using cache
 ---> a16520afe157
Step 19/33 : RUN apt clean && apt update && apt install python3-pip -y && apt clean
 ---> Using cache
 ---> 1144824bac27
Step 20/33 : RUN apt update && apt install openjdk-8-jdk -y && apt clean
 ---> Using cache
 ---> ba2bd6508bb0
Step 21/33 : RUN apt-get update && apt-get install -y g++ build-essential cmake git libncurses-dev zlib1g-dev       libevent-dev       libcrypto++-dev libmsgpack-dev libjsoncpp-dev       libmysqlcppconn-dev libgtest-dev cmake libgoogle-perftools-dev       libssl-dev libmysqlclient-dev libcrypto++-dev libc6-dev libc6-dev-i386
 ---> Using cache
 ---> d4baf9cb67f9
Step 22/33 : COPY installNodejs.sh /
 ---> Using cache
 ---> 563defb5e7e4
Step 23/33 : RUN chmod +x /installNodejs.sh && cd / && ./installNodejs.sh && ln -s /usr/bin/nodejs /usr/bin/node
 ---> Using cache
 ---> db94e36ccc2f
Step 24/33 : RUN chown -R lxy /home/lxy/
 ---> Using cache
 ---> 10cd68c68fc3
Step 25/33 : USER lxy
 ---> Using cache
 ---> 7cb0d7cece1a
Step 26/33 : WORKDIR $HOME
 ---> Using cache
 ---> 09a1aa51232b
Step 27/33 : ENV PATH "/home/lxy/.local/bin:${PATH}"
 ---> Using cache
 ---> 9bab00f629f1
Step 28/33 : COPY installCocvim.sh .
 ---> Using cache
 ---> 48d0ae3f192c
Step 29/33 : COPY vimrc ${HOME}/.vimrc
 ---> Using cache
 ---> c68124a1eaf7
Step 30/33 : COPY coc-settings.json ${HOME}/.vim/
 ---> Using cache
 ---> 706353fa5b0a
Step 31/33 : RUN sudo chmod +x installCocvim.sh && ./installCocvim.sh
 ---> Using cache
 ---> 682faae5d7b1
Step 32/33 : USER root
 ---> Using cache
 ---> 402dbd527fab
Step 33/33 : RUN update-alternatives --set python /usr/bin/python2
 ---> Using cache
 ---> cbeb2a79f921
Successfully built cbeb2a79f921
Successfully tagged voxgraph_dev_vim:latest
make[1]: Leaving directory '/mnt/sda1/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws/.devcontainer'
docker build -t voxgraph_vs .
Sending build context to Docker daemon    704MB
Step 1/7 : FROM voxgraph_dev_vim:latest
 ---> cbeb2a79f921
Step 2/7 : RUN chsh -s /bin/bash lxy &&   yes lxy19961002 | passwd lxy
 ---> Using cache
 ---> 1d2c249905d8
Step 3/7 : ENV HOME /home/lxy
 ---> Using cache
 ---> 0db062c95361
Step 4/7 : RUN apt update     && apt install -y openssh-server                       xauth     && mkdir /root/.ssh     && chmod 700 /root/.ssh     && ssh-keygen -A     && sed -i "s/^.*X11Forwarding.*$/X11Forwarding yes/" /etc/ssh/sshd_config     && sed -i "s/^.*X11UseLocalhost.*$/X11UseLocalhost no/" /etc/ssh/sshd_config     && grep "^X11UseLocalhost" /etc/ssh/sshd_config || echo "X11UseLocalhost no" >> /etc/ssh/sshd_config
 ---> Using cache
 ---> 83c394f17203
Step 5/7 : WORKDIR /workspaces/voxgraph_melodic_ws/
 ---> Using cache
 ---> 83c0a9ef123b
Step 6/7 : ENTRYPOINT [ "/ros_entrypoint.sh" ]
 ---> Using cache
 ---> dda54e5050e5
Step 7/7 : CMD ["sh", "-c", "/usr/sbin/sshd && tail -f /dev/null"]
 ---> Using cache
 ---> 001371405b1f
Successfully built 001371405b1f
Successfully tagged voxgraph_vs:latest
docker run --rm --name voxgraph_vs\
	--cap-add=SYS_PTRACE --security-opt seccomp=unconfined \
		--gpus all \
		--name voxgraph_vs \
		-e DISPLAY=localhost:10.0 \
		-e QT_X11_NO_MITSHM=1 \
		-e XAUTHORITY=/tmp/.docker.xauth \
		-e HOME=/home/lxy \
		-v /tmp/.X11-unix:/tmp/.X11-unix:rw \
		-v /tmp/.docker.xauth:/tmp/.docker.xauth \
		-v /home/lxy/Datasets:/home/lxy/Datasets \
		-v /home/lxy/Workspace/mrslam/coxslam_ws:/home/lxy/Workspace/mrslam/coxslam_ws/ \
		-v /home/lxy/Workspace/mrslam/orbslam_2_ros_ws:/home/lxy/Workspace/mrslam/orbslam_2_ros_ws/ \
		-v /home/lxy/Workspace/mrslam/sysmon_ws:/home/lxy/Workspace/mrslam/sysmon_ws/ \
		-v /home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_ws:/home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_ws \
		-v /home/lxy/Workspace/mrslam/maskgraph_ws/voxgraph_melodic_ws:/workspaces/voxgraph_melodic_ws/ \
		-v /etc/localtime:/etc/localtime \
		-p2222:22 \
		--runtime=nvidia \
		--privileged \
		voxgraph_vs
